#!/usr/bin/env python3

"""
This bot is designed to work on QuakeNet. Without much modification, it can be
made to work on any IRC netowrk.

Please refer to the README.md file for usage instructions.
"""

import socket
from random import sample
from time import sleep
from importlib import import_module
from imp import reload

modules = {}

def add_module(name):
    modules[name] = import_module("modules." + name)

def reload_module(name):
    if name in modules:
        modules[name] = reload(modules[name])
        return True
    return False

class IRC:
    """IRC wrapper class"""

    def __init__(self):
        self.socket = None
        self.nick = "porkjr"
        self.password = ""
        self.mode = 8
        self.realname = "Pork Jr."
        self.owner = ("simonlc", "~Simon@clownFart.users.quakenet.org")
        self.channels = ["#warsow.na"]
        self.home = self.channels[0]
        self.connected = False
        self.authed = False

    def send(self, string):
        """Converts a string and formats it to be sent to the socket."""
        data = (string + "\r\n").encode()
        self.socket.send(data)

    def privmsg(self, msg, channel):
        """Sends a message to channel or user."""
        data = ("PRIVMSG {} :{}".format(channel, msg))
        self.send(data)

    def notice(self, msg, channel):
        """Sends a notice to user or channel."""
        data = ("NOTICE {} :{}".format(channel, msg))
        self.send(data)

    def qtopic(self, topic):
        """Set the topic with a Q command, requires +t flag."""
        data = ("PRIVMSG Q :SETTOPIC {} {}".format(self.home, topic))
        self.send(data)

    def connect(self, host, port = 6667):
        self.socket = socket.socket()
        self.socket.connect((host, port))
        self.send("NICK {}".format(self.nick))
        self.send("USER {} {} * :{}".format(self.nick, self.mode, self.realname))

    def recv(self, bufsize):
        return self.socket.recv(bufsize)

    def auth(self):
        if len(self.password):
            self.send("AUTH {} {}".format(self.nick, self.password))
            # TODO: check for confirmation of auth from server
            self.authed = True
        self.send("MODE {} +x".format(self.nick))
        self.send("JOIN {}".format(", ".join(self.channels)))
        self.connected = True

koth_queue = []

def main():
    """This is the main fuction of the program. It receives the data, replies
    to pings, sends initial auth and channel info, and parses the received data
    for important information."""

    add_module("pickup")

    irc = IRC()
    irc.connect("servercentral.il.us.quakenet.org")

    while True:
        data = irc.recv(1024).decode("ascii", "ignore").split("\n")

        for line in data:
            l = line.rstrip().split(" ")

            if l[0] == "PING":
                irc.send("PONG {}".format(l[1]))
            elif len(line):
                print(line)

            if len(l) > 2:
                if not irc.connected and l[1] == "376":
                    # We're connected, so auth and join channels.
                    # NOTE: 376 is "end of motd" (byce)
                    irc.auth()

                if l[1] == "PRIVMSG" and l[2] == irc.home \
                    and l[3][:2] in (":.", ":!"):
                    nick, host = l[0].lstrip(":").split("!")
                    if l[3][2:] == "reload" and (nick, host) == irc.owner:
                        if len(l) < 5:
                            for name, module in modules.items():
                                reload_module(name)
                                module.module_reloaded(irc)
                            irc.privmsg("reloaded all modules", irc.home)
                        else:
                            module = l[4]
                            if reload_module(module):
                                modules[module].module_reloaded(irc)
                                irc.privmsg("reloaded {} module".format(module),
                                    irc.home)

                for m in modules.values():
                    m.module_update(irc, l)

        sleep(1)

# KOTH Bot Functions

def command_signup(nick, host):
    for i in koth_queue:
        if host not in koth_queue[i]:
            koth_queue.append((nick, host))

if __name__ == "__main__":
    main()
